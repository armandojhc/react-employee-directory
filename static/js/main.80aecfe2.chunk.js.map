{"version":3,"sources":["utils/API.js","components/EmployeeRow/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","EmployeeRow","alt","src","this","props","picture","name","phone","email","dob","Component","App","state","search","employees","first","results","handleInputChange","event","setState","target","value","searchTerm","toLowerCase","searchResults","i","length","employee","includes","last","push","console","log","API","then","res","data","catch","err","Container","fluid","Jumbotron","className","Row","Col","md","Form","Group","controlId","Control","type","placeholder","onChange","Table","striped","bordered","hover","map","obj","key","thumbnail","date","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.80aecfe2.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\n\nexport default {\n  getAllEmployees: function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us&inc=picture,name,phone,email,dob\");\n  }\n\n};","import React, { Component } from 'react';\n\nclass EmployeeRow extends Component {\n\n    render() {\n        return (\n            <tr>\n                <td><img alt=\"Employee\" src={this.props.picture} /></td>\n                <td>{this.props.name}</td>\n                <td>{this.props.phone}</td>\n                <td>{this.props.email}</td>\n                <td>{this.props.dob}</td>\n                <td></td>\n            </tr>\n        );\n    }\n}\n\nexport default EmployeeRow;","import React, { Component } from \"react\";\nimport API from \"./utils/API\";\nimport Table from 'react-bootstrap/Table';\nimport EmployeeRow from './components/EmployeeRow';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport './App.css';\n\n\n// import Alert from \"../components/Alert\";\n\nclass App extends Component {\n\n  state = {\n    search: \"\",\n    employees: [{name: {first:\"Test\"}}],\n    results: []\n    \n  };\n\n  // When the component mounts, get a list of all available base breeds and update this.state.breeds\n  componentDidMount() {\n  \n    API.getAllEmployees()\n       .then(res => {\n         \n         this.setState({ employees: res.data.results, results: res.data.results });\n\n\n         console.log(res.data.results[0]);\n  \n       })\n       .catch(err => console.log(err));\n  }\n\n  handleInputChange = event => {\n    this.setState({ search: event.target.value }); \n  };\n\n\n  search = (event) => {\n    \n    \n    let searchTerm = event.target.value.toLowerCase();\n\n\n    let searchResults = [];\n\n    for (var i = 0; i < this.state.employees.length; i++) {\n      let employee = this.state.employees[i];\n      if (employee.name.first.toLowerCase().includes(searchTerm) || employee.name.last.toLowerCase().includes(searchTerm)) {\n        searchResults.push(employee);\n      }\n    }\n\n    console.log(`There are ${searchResults.length} results`);\n\n    this.setState({ results: searchResults });\n    \n\n  }\n\n//   This is where you render the components. Need to write each component that is rendered here. \n  render() {\n    \n    //console.log(this.state.employees.length);\n    return (\n      \n      <Container fluid>\n        <Jumbotron fluid className=\"jumboTron\">\n          \n            <h1>Employee Search App</h1>\n            <p>\n              \n            </p>\n          \n      </Jumbotron>\n        <Row>\n          <Col md={4}></Col>\n          <Col md={4}> <h4> Search Employee</h4></Col>\n          <Col md={4}></Col>\n\n        </Row>\n        <Row>\n          <Col md={4}></Col>\n          <Col md={4}>\n            <Form>\n              <Form.Group controlId=\"search\">\n                <Form.Control type=\"text\" placeholder=\"\" onChange={this.search}/>\n              </Form.Group>\n            </Form>\n          </Col>\n          <Col md={4}></Col>\n        </Row>\n        <Row>\n          <Col>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>Image</th>\n                <th>Name</th>\n                <th>Phone</th>\n                <th>Email</th>\n                <th>Dob</th>\n              </tr>\n            </thead>\n            <tbody>\n\n              {this.state.results.map((obj, i) => {\n\n                  return <EmployeeRow key={i} picture={obj.picture.thumbnail} name={obj.name.first + \" \" + obj.name.last} phone={obj.phone} email={obj.email} dob={obj.dob.date}/>\n\n                  \n\n              })}\n            \n              \n            </tbody>\n          </Table>\n\n          </Col>\n        </Row>\n      </Container>\n    \n    );\n  }\n}\n\nexport default App;\n\n// import React from 'react';\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\n// // import Discover from \"./pages/Discover\";\n// // import About from \"./pages/About\";\n// import Search from \"./pages/searchEmployee\";\n// import Navbar from \"./components/Navbar\";\n// import Footer from \"./components/Footer\";\n// import Wrapper from \"./components/Wrapper\";\n// import './App.css';\n\n// function App() {\n//   return (\n//     <Router>\n//       <div>\n//         <Navbar />\n//         <Wrapper>\n//           {/* <Route exact path=\"/\" component={About} /> */}\n//           {/* <Route exact path=\"/about\" component={About} /> */}\n//           {/* <Route exact path=\"/discover\" component={Discover} /> */}\n//           <Route exact path=\"/search\" component={Search} />\n//         </Wrapper>\n//         <Footer />\n//       </div>\n//     </Router>\n//   );\n// }\n\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}